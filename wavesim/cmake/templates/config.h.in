/* --------------------------------------------------------------
 * Configures prerequisits for this library
 * --------------------------------------------------------------*/

#ifndef WAVESIM_CONFIG_HPP
#   define WAVESIM_CONFIG_HPP

    /* Config */
#   define WAVESIM_PRECISION_${WS_PRECISION_CAPS_AND_NO_SPACES}
#   define WAVESIM_${WAVESIM_BUILD_TYPE}
    #cmakedefine WAVESIM_64BIT_INDEX_BUFFERS
    #cmakedefine WAVESIM_PIC
    #cmakedefine WAVESIM_PROFILING
    #cmakedefine WAVESIM_PYTHON
    #cmakedefine WAVESIM_TESTS

    /* Some macros */
#   define WS_RESTRICT ${WS_RESTRICT}
#   define WS_WARN_UNUSED ${WS_WARN_UNUSED}
#   ifdef __cplusplus
#       define C_BEGIN extern "C" {
#   else
#       define C_BEGIN
#   endif
#   ifdef __cplusplus
#       define C_END }
#   else
#       define C_END
#   endif
#   define WAVESIM_HELPER_API_EXPORT ${WAVESIM_HELPER_API_EXPORT}
#   define WAVESIM_HELPER_API_IMPORT ${WAVESIM_HELPER_API_IMPORT}
#   define WAVESIM_HELPER_API_LOCAL  ${WAVESIM_HELPER_API_LOCAL}
#   if defined(WAVESIM_BUILDING) /* defined by CMake when library is being compiled */
#       define WAVESIM_PUBLIC_API WAVESIM_HELPER_API_EXPORT
#   else
#       define WAVESIM_PUBLIC_API WAVESIM_HELPER_API_IMPORT
#   endif
#   define WAVESIM_PRIVATE_API WAVESIM_HELPER_API_LOCAL

    /* Global includes */
#   ifdef WAVESIM_HAVE_STDINT_H
#       include <stdint.h>
#   else
#       include "wavesim/pstdint.h"
#   endif
#   include "wavesim/return_codes.h"

    /*
     * Index buffer type depends on whether 64-bit IBs are enabled.
     * Note that wsib_t needs to be a signed type, because it is the most
     * "generic" integer possible (i.e. you can pass the most types of integers
     * using a wsib_t type).
     */
#   ifdef WAVESIM_64BIT_INDEX_BUFFERS
typedef int64_t wsib_t;
#   else
typedef int32_t wsib_t;
#   endif

    /* The "real" datatype to be used throughout the library */
typedef ${WAVESIM_PRECISION} wsreal_t;

    /* Define epsilon depending on type of "real" */
#   include <float.h>
#   if defined(WAVESIM_PRECISION_LONG_DOUBLE)
#       define WS_EPSILON DBL_EPSILON
#   elif defined(WAVESIM_PRECISION_DOUBLE)
#       define WS_EPSILON DBL_EPSILON
#   elif defined(WAVESIM_PRECISION_FLOAT)
#       define WS_EPSILON FLT_EPSILON
#   else
#       error Unknown precision. Are you sure you configured with WS_PRECISION_CAPS_AND_NO_SPACES defined?
#   endif

#endif /* WAVESIM_CONFIG_HPP */
